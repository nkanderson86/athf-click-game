{"version":3,"sources":["components/NAV/index.jsx","components/Card/index.jsx","components/Title/index.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["NavBar","props","react_default","a","createElement","className","href","message","score","topScore","Card","style","height","width","margin","src","image","alt","id","onClick","Title","App","state","maxScore","characters","athf","clickedArr","randomize","arr","i","length","j","Math","floor","random","temp","handleClick","event","console","log","target","_this","indexOf","setState","resetGame","push","this","_this2","components_NAV","components_Title","map","character","components_Card","key","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.92444dd5.chunk.js","sourcesContent":["import React from 'react';\nimport \"./NAV.css\";\n\n\n\nconst NavBar = (props) => {\n    return (\n        <div className='navbar-fixed'>\n            <nav>\n                <div className='nav-wrapper grey darken-3 row flow-text'>\n                    <div className='col s6 m4'>\n                        <a href='https://github.com/nkanderson86/athf-click-game'><b className='light-green-text'>Clicky Game</b></a>\n                    </div>\n                    <div className='col s4 hide-on-small-only'>\n                        <p className='message-text'>{props.message}</p>\n                    </div>\n                    <div className='col s6 m4'>\n                        <span className='light-green-text flow-text score-text right'>Score: {props.score} | Top Score: {props.topScore}</span>\n                    </div>\n                </div>\n            </nav>\n        </div>\n    );\n};\n\nexport default NavBar;","import React from 'react';\nimport \"./Card.css\"\n\nconst Card = (props) => {\n    return (\n        <div className='col s6 m4 l3'>\n            <div className={`card hoverable center-align`}>\n                <img\n                    className=\"click-image\"\n                    style={{ height: 200, width: 150, margin: 6.5 }}\n                    src={props.image}\n                    alt={props.id}\n                    id={props.id}\n                    onClick={props.onClick}\n\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default Card;","// import React from \"react\";\n// import \"./Title.css\";\n\nimport React from 'react';\n\nconst Title = () => {\n    return (\n        <div className='container center-align'>\n            <div className='section no-pad-bot'>\n                <div className='container'>\n                    <div className='row'>\n                        <h2 className='header col s12 light'>Clicky Game!</h2>\n                        <h5>Click on your favorite Aqua Teen Hunger Force characters to score points.  Click each character only once! If you can do that twelve times without forgetting, you win! </h5>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default Title;\n","import React, { Component } from \"react\";\nimport Nav from \"./components/NAV\"\nimport Card from \"./components/Card\"\nimport Title from \"./components/Title\"\nimport athf from \"./ATHF.json\"\n\n\nclass App extends Component {\n\n  state = {\n    score: 0,\n    topScore: 0,\n    maxScore: 12,\n    message: \"Click on any character to start!\",\n    characters: athf,\n    clickedArr: []\n  }\n\n  randomize = (arr) => {\n    for (let i = arr.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let temp = arr[i]\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n  }\n\n  resetGame() {\n    this.setState({ score: 0, clickedArr: [] })\n    // this.randomize(this.characters)\n  }\n\n  handleClick = (event) => {\n    console.log(event.target.src)\n    if (this.state.clickedArr.indexOf(event.target.src) !== -1) {\n      this.setState({ message: \"You've already clicked that!\" })\n      this.resetGame();\n    }\n    else if (this.state.topScore === this.state.score) {\n      this.state.clickedArr.push(event.target.src)\n      this.setState({ message: \"Correct guess!\", score: + 1, topScore: + 1 })\n    }\n    else {\n      this.state.clickedArr.push(event.target.src)\n      this.setState({ message: \"Correct guess!\", score: + 1 })\n    }\n\n  }\n\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Nav\n          score={this.state.score}\n          topScore={this.state.topScore}\n          message={this.state.message}\n        />\n        <Title />\n        <div className=\"row\">\n          {this.state.characters.map((character, i) => (\n            <Card\n              key={character.id}\n              image={character.image}\n              value={character.id}\n              onClick={this.handleClick}\n            />\n          ))}\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}